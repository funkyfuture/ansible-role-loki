---

- ansible.builtin.include_tasks: vars.yml

- ansible.builtin.include_tasks: preflight.yml

- name: Create loki system group
  ansible.builtin.group:
    name: "{{ loki_system_group }}"
    state: present
  when: loki_system_group != "root"

- name: Create loki system user
  ansible.builtin.user:
    name: "{{ loki_system_user }}"
    shell: "/usr/sbin/nologin"
    group: "{{ loki_system_group }}"
    createhome: false
  when: loki_system_user != "root"

- name: Get current loki version
  ansible.builtin.shell: loki --version | head -n1 | cut -d " " -f 3
  register: loki_current_version
  changed_when: false

- block:

  - block:
    - ansible.builtin.include_tasks: local_download.yml
      loop: "{{ loki_binaries }}"
    - ansible.builtin.set_fact:
        binaries_location: /tmp
    when: loki_distribute_binaries_via_localhost

  - ansible.builtin.include_tasks: install.yml
    loop: "{{ loki_binaries }}"

  when: loki_current_version.stdout != loki_version

- name: Configure data directory
  ansible.builtin.file:
    path: /var/lib/loki
    state: directory
    owner: "{{ loki_system_user }}"
    group: "{{ loki_system_group }}"
    mode: ug=rwx,o=

- name: Generate configuration file
  ansible.builtin.template:
    src: loki.yml.j2
    dest: /etc/loki.yml
    owner: "{{ loki_system_user }}"
    group: "{{ loki_system_group }}"
    mode: ug=r,o=
  notify:
    - restart loki

- name: Generate systemd service unit
  ansible.builtin.template:
    src: loki.service.j2
    dest: /etc/systemd/system/loki.service
    owner: root
    group: root
    mode: ug=r,o=
  notify:
    - restart loki

...
